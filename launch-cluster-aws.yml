---
#
# Caveats:
# - Boto must be installed for the system (not just the local session)
#
# - AWS credentials must be added to ~/.boto file under a [Credentials] heading.
#
# - The `ansible-playbook` command requires an inventory file to be specified
#   at runtime. Since no inventory is used by this playbook, at the very
#   least you will need to have a dummy inventory file with 'localhost' as
#   the only line.
#
# - You may also want to specify the 'ubuntu' user as the user to use when
#   executing commands.
#
- hosts:
    - localhost
  vars:
    instance_security_group: cluster-testing-sg
    instance_ssh_key: cluster-testing
    instance_subnet_id: subnet-8ab502d3
    influxdb_instance_count: 3
    influxdb_instance_ami: ami-df6a8b9b
    influxdb_instance_size: t2.medium
    stress_instance_count: 1
    stress_instance_ami: ami-df6a8b9b
    stress_instance_size: c4.xlarge
    influxdb_disk_size: 10
    influxdb_disk_type: gp2
    influxdb_disk_iops: 30
    stress_disk_size: 10
    stress_disk_type: gp2
    stress_disk_iops: 30
  connection: local
  tasks:
    - name: Create InfluxDB instances
      local_action:
        module: ec2
        key_name: "{{ instance_ssh_key }}"
        group: "{{ instance_security_group }}"
        instance_type: "{{ influxdb_instance_size }}"
        region: us-west-1
        image: "{{ influxdb_instance_ami }}"
        wait: yes
        wait_timeout: 500
        count: "{{ influxdb_instance_count }}"
        instance_tags:
          Name: "{{ ansible_user_id }}-cluster-test-influxdb-{{ ansible_date_time.epoch }}"
          test-type: clustering
          instance-type: influxdb
        vpc_subnet_id: "{{ instance_subnet_id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/sda1
            volume_type: "{{ influxdb_disk_type }}"
            volume_size: "{{ influxdb_disk_size }}"
            delete_on_termination: yes
      register: influxdb_provision_output

    - name: Create stress instances
      local_action:
        module: ec2
        key_name: "{{ instance_ssh_key }}"
        group: "{{ instance_security_group }}"
        instance_type: "{{ influxdb_instance_size }}"
        region: us-west-1
        image: "{{ stress_instance_ami }}"
        wait: yes
        wait_timeout: 500
        count: "{{ stress_instance_count }}"
        instance_tags:
          Name: "{{ ansible_user_id }}-cluster-test-stress-{{ ansible_date_time.epoch }}"
          test-type: clustering
          instance-type: stress
        vpc_subnet_id: "{{ instance_subnet_id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/sda1
            volume_type: "{{ stress_disk_type }}"
            volume_size: "{{ stress_disk_size }}"
            delete_on_termination: yes
      register: stress_provision_output
    
    - name: A moment of silence
      pause: minutes=2
      
    - name: Add InfluxDB hosts to inventory
      add_host: hostname={{ item.public_ip }} groups=influxdb
      with_items: "{{ influxdb_provision_output.instances }}"

    - name: Add stress hosts to inventory
      add_host: hostname={{ item.public_ip }} groups=stress
      with_items: "{{ stress_provision_output.instances }}"

# Apparently this needs to be run to re-gather facts for the new instances
- hosts:
    - influxdb
    - stress
  vars:
    influxdb_install_version: nightly
  user: ubuntu
  become: yes
  gather_facts: yes
  tasks:
    []
      
- hosts: influxdb
  vars:
    influxdb_install_version: nightly
  user: ubuntu
  become: yes
  roles:
    - role: influxdb
      influxdb_cluster_servers: yes
      influxdb_data_engine: tsm1
      influxdb_monitor_store_enabled: "false"
      influxdb_install_url: https://s3-us-west-1.amazonaws.com/influxdata-downloads/influxdb_0.10.0-meta-service2-0_amd64.deb
      influxdb_purge_peer_data: yes
      influxdb_meta_cluster_tracing: "true"
    - role: telegraf
      telegraf_runas_user: root
      telegraf_runas_group: root
      telegraf_plugins_enabled:
        - cpu
        - disk
        - io
        - mem
        - swap
        - system
        - procstat
      telegraf_plugin_settings:
        cpu:
          percpu: "true"
          totalcpu: "true"
          drop:
            - cpu_time
        disk:
        io:
          skip_serial_number: "true"
        procstat:
          exe: influxd
          prefix: influxdb
      telegraf_tags:
        id: "{{ test_id }}"
        name: "{{ test_name }}"          
      telegraf_influxdb_urls:
        - "{{ stress_results_server_url }}"

- hosts: stress
  vars:
    influxdb_install_version: nightly
  user: ubuntu
  become: yes
  roles:
    - role: influxdb
      influxdb_start_service: no
      influxdb_cluster_servers: no

